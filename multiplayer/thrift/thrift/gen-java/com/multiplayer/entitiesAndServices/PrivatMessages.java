/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.multiplayer.entitiesAndServices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-22")
public class PrivatMessages implements org.apache.thrift.TBase<PrivatMessages, PrivatMessages._Fields>, java.io.Serializable, Cloneable, Comparable<PrivatMessages> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrivatMessages");

  private static final org.apache.thrift.protocol.TField CHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrivatMessagesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrivatMessagesTupleSchemeFactory();

  public long chatId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Message> messages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAT_ID((short)1, "chatId"),
    MESSAGES((short)2, "messages");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAT_ID
          return CHAT_ID;
        case 2: // MESSAGES
          return MESSAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHATID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Message"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrivatMessages.class, metaDataMap);
  }

  public PrivatMessages() {
  }

  public PrivatMessages(
    long chatId,
    java.util.List<Message> messages)
  {
    this();
    this.chatId = chatId;
    setChatIdIsSet(true);
    this.messages = messages;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrivatMessages(PrivatMessages other) {
    __isset_bitfield = other.__isset_bitfield;
    this.chatId = other.chatId;
    if (other.isSetMessages()) {
      java.util.List<Message> __this__messages = new java.util.ArrayList<Message>(other.messages.size());
      for (Message other_element : other.messages) {
        __this__messages.add(new Message(other_element));
      }
      this.messages = __this__messages;
    }
  }

  public PrivatMessages deepCopy() {
    return new PrivatMessages(this);
  }

  @Override
  public void clear() {
    setChatIdIsSet(false);
    this.chatId = 0;
    this.messages = null;
  }

  public long getChatId() {
    return this.chatId;
  }

  public PrivatMessages setChatId(long chatId) {
    this.chatId = chatId;
    setChatIdIsSet(true);
    return this;
  }

  public void unsetChatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHATID_ISSET_ID);
  }

  /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHATID_ISSET_ID);
  }

  public void setChatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHATID_ISSET_ID, value);
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Message> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(Message elem) {
    if (this.messages == null) {
      this.messages = new java.util.ArrayList<Message>();
    }
    this.messages.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Message> getMessages() {
    return this.messages;
  }

  public PrivatMessages setMessages(@org.apache.thrift.annotation.Nullable java.util.List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHAT_ID:
      if (value == null) {
        unsetChatId();
      } else {
        setChatId((java.lang.Long)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((java.util.List<Message>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAT_ID:
      return getChatId();

    case MESSAGES:
      return getMessages();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHAT_ID:
      return isSetChatId();
    case MESSAGES:
      return isSetMessages();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PrivatMessages)
      return this.equals((PrivatMessages)that);
    return false;
  }

  public boolean equals(PrivatMessages that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chatId = true;
    boolean that_present_chatId = true;
    if (this_present_chatId || that_present_chatId) {
      if (!(this_present_chatId && that_present_chatId))
        return false;
      if (this.chatId != that.chatId)
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(chatId);

    hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
    if (isSetMessages())
      hashCode = hashCode * 8191 + messages.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrivatMessages other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChatId()).compareTo(other.isSetChatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatId, other.chatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrivatMessages(");
    boolean first = true;

    sb.append("chatId:");
    sb.append(this.chatId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messages:");
    if (this.messages == null) {
      sb.append("null");
    } else {
      sb.append(this.messages);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrivatMessagesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PrivatMessagesStandardScheme getScheme() {
      return new PrivatMessagesStandardScheme();
    }
  }

  private static class PrivatMessagesStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrivatMessages> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrivatMessages struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chatId = iprot.readI64();
              struct.setChatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.messages = new java.util.ArrayList<Message>(_list8.size);
                @org.apache.thrift.annotation.Nullable Message _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Message();
                  _elem9.read(iprot);
                  struct.messages.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrivatMessages struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
      oprot.writeI64(struct.chatId);
      oprot.writeFieldEnd();
      if (struct.messages != null) {
        oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
          for (Message _iter11 : struct.messages)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrivatMessagesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PrivatMessagesTupleScheme getScheme() {
      return new PrivatMessagesTupleScheme();
    }
  }

  private static class PrivatMessagesTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrivatMessages> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrivatMessages struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChatId()) {
        optionals.set(0);
      }
      if (struct.isSetMessages()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChatId()) {
        oprot.writeI64(struct.chatId);
      }
      if (struct.isSetMessages()) {
        {
          oprot.writeI32(struct.messages.size());
          for (Message _iter12 : struct.messages)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrivatMessages struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.chatId = iprot.readI64();
        struct.setChatIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messages = new java.util.ArrayList<Message>(_list13.size);
          @org.apache.thrift.annotation.Nullable Message _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Message();
            _elem14.read(iprot);
            struct.messages.add(_elem14);
          }
        }
        struct.setMessagesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

